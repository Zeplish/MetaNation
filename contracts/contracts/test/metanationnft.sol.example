// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "../node_modules/@openzeppelin/contracts/utils/Counters.sol";

contract MetaNationNFT is ERC721 {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    constructor () ERC721("MetaNationNFT", "MNFT") {}

    struct Stream {
        uint256 id;
        address creator;
        string uri;
    }

    mapping (uint256 => Stream) public Streams;

    function createStream (string memory uri) public returns (uint256){
        _tokenIds.increment();
        uint256 newStreamId = _tokenIds.current();
        _safeMint(msg.sender, newStreamId);

        Streams[newStreamId] = Stream(newStreamId, msg.sender, uri);

        return newStreamId;
    }

    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        return Streams[tokenId].uri;
    }
}